package MicroserviceArchitectureLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Communicates;
  private ConceptPresentation props_CommunicationProtocol;
  private ConceptPresentation props_Container;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_Microservice;
  private ConceptPresentation props_ServerNode;
  private ConceptPresentation props_VirtualMachine;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Communicates:
        if (props_Communicates == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("comm");
          props_Communicates = cpb.create();
        }
        return props_Communicates;
      case LanguageConceptSwitch.CommunicationProtocol:
        if (props_CommunicationProtocol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A meta class for communication between microservices");
          cpb.rawPresentation("comm. protocol");
          props_CommunicationProtocol = cpb.create();
        }
        return props_CommunicationProtocol;
      case LanguageConceptSwitch.Container:
        if (props_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A meta class for container which will host docker image having microservice");
          cpb.presentationByName();
          props_Container = cpb.create();
        }
        return props_Container;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Meta class for environment hosting microservice architecture based application");
          cpb.presentationByName();
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.Microservice:
        if (props_Microservice == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A meta class for microservice to be hosted inside container");
          cpb.presentationByName();
          props_Microservice = cpb.create();
        }
        return props_Microservice;
      case LanguageConceptSwitch.ServerNode:
        if (props_ServerNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A meda class for hardware server node to be deployed in environment");
          cpb.presentationByName();
          props_ServerNode = cpb.create();
        }
        return props_ServerNode;
      case LanguageConceptSwitch.VirtualMachine:
        if (props_VirtualMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A meta class for virtual machine for holding containers and to be deployed on server node");
          cpb.presentationByName();
          props_VirtualMachine = cpb.create();
        }
        return props_VirtualMachine;
    }
    return null;
  }
}
