package MicroserviceArchitectureLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCommunicates = createDescriptorForCommunicates();
  /*package*/ final ConceptDescriptor myConceptCommunicationProtocol = createDescriptorForCommunicationProtocol();
  /*package*/ final ConceptDescriptor myConceptContainer = createDescriptorForContainer();
  /*package*/ final ConceptDescriptor myConceptEnvironment = createDescriptorForEnvironment();
  /*package*/ final ConceptDescriptor myConceptMicroservice = createDescriptorForMicroservice();
  /*package*/ final ConceptDescriptor myConceptServerNode = createDescriptorForServerNode();
  /*package*/ final ConceptDescriptor myConceptVirtualMachine = createDescriptorForVirtualMachine();
  /*package*/ final EnumerationDescriptor myEnumerationEnvironmentType = new EnumerationDescriptor_EnvironmentType();
  /*package*/ final EnumerationDescriptor myEnumerationMicroserviceCommunicationType = new EnumerationDescriptor_MicroserviceCommunicationType();
  /*package*/ final EnumerationDescriptor myEnumerationMicroserviceType = new EnumerationDescriptor_MicroserviceType();
  /*package*/ final EnumerationDescriptor myEnumerationVMType = new EnumerationDescriptor_VMType();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeIP = new ConstrainedStringDatatypeDescriptorImpl(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb16bL, "IP", "r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3327606504615227755", "\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCommunicates, myConceptCommunicationProtocol, myConceptContainer, myConceptEnvironment, myConceptMicroservice, myConceptServerNode, myConceptVirtualMachine);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Communicates:
        return myConceptCommunicates;
      case LanguageConceptSwitch.CommunicationProtocol:
        return myConceptCommunicationProtocol;
      case LanguageConceptSwitch.Container:
        return myConceptContainer;
      case LanguageConceptSwitch.Environment:
        return myConceptEnvironment;
      case LanguageConceptSwitch.Microservice:
        return myConceptMicroservice;
      case LanguageConceptSwitch.ServerNode:
        return myConceptServerNode;
      case LanguageConceptSwitch.VirtualMachine:
        return myConceptVirtualMachine;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationEnvironmentType, myEnumerationMicroserviceCommunicationType, myEnumerationMicroserviceType, myEnumerationVMType, myCSDatatypeIP);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForCommunicates() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "Communicates", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x401f62f44cfb5204L);
    b.class_(false, false, false);
    b.super_("MicroserviceArchitectureLanguage.structure.CommunicationProtocol", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdf080fL);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/4620520544108499460");
    b.version(2);
    b.associate("microservice1", 0x401f62f44cfb5205L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea85L).optional(false).origin("4620520544108499461").done();
    b.associate("microservice2", 0x401f62f44cfb5207L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea85L).optional(false).origin("4620520544108499463").done();
    b.alias("comm");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommunicationProtocol() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "CommunicationProtocol", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdf080fL);
    b.class_(false, false, false);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3327606504615249935");
    b.version(2);
    b.property("Type", 0x2e2e087c4bdf0817L).type(MetaIdFactory.dataTypeId(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb15dL)).origin("3327606504615249943").done();
    b.alias("comm. protocol");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "Container", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb0d7L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3327606504615227607");
    b.version(2);
    b.property("IP", 0x2e2e087c4bdeb169L).type(MetaIdFactory.dataTypeId(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb16bL)).origin("3327606504615227753").done();
    b.property("Port", 0x2e2e087c4bdeb16cL).type(PrimitiveTypeId.INTEGER).origin("3327606504615227756").done();
    b.aggregate("Microservice", 0x2e2e087c4bdf0806L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea85L).optional(true).ordered(true).multiple(false).origin("3327606504615249926").done();
    b.alias("container");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnvironment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "Environment", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb11bL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3327606504615227675");
    b.version(2);
    b.property("Type", 0x2e2e087c4bdeb136L).type(MetaIdFactory.dataTypeId(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb122L)).origin("3327606504615227702").done();
    b.property("Location", 0x2e2e087c4bdeb166L).type(PrimitiveTypeId.STRING).origin("3327606504615227750").done();
    b.aggregate("NodeList", 0x2e2e087c4bdf0800L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea7cL).optional(true).ordered(true).multiple(true).origin("3327606504615249920").done();
    b.aggregate("Communications", 0x401f62f44cfb51e4L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x401f62f44cfb5204L).optional(true).ordered(true).multiple(true).origin("4620520544108499428").done();
    b.alias("env");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMicroservice() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "Microservice", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea85L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3324083196209785477");
    b.version(2);
    b.property("Type", 0x2e2e087c4bdeb158L).type(MetaIdFactory.dataTypeId(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb13cL)).origin("3327606504615227736").done();
    b.property("Health", 0x2e2e087c4bdf0808L).type(PrimitiveTypeId.BOOLEAN).origin("3327606504615249928").done();
    b.alias("microservice");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForServerNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "ServerNode", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea7cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3324083196209785468");
    b.version(2);
    b.property("RAM", 0x2e2e087c4bdeb174L).type(PrimitiveTypeId.STRING).origin("3327606504615227764").done();
    b.property("Processor", 0x2e2e087c4bdeb176L).type(PrimitiveTypeId.STRING).origin("3327606504615227766").done();
    b.property("Disk", 0x2e2e087c4bdeb179L).type(PrimitiveTypeId.STRING).origin("3327606504615227769").done();
    b.aggregate("VMList", 0x2e2e087c4bdf0802L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea82L).optional(true).ordered(true).multiple(true).origin("3327606504615249922").done();
    b.alias("node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVirtualMachine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MicroserviceArchitectureLanguage", "VirtualMachine", 0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e21840e21edea82L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:48771403-405a-41ee-a755-08578f66c616(MicroserviceArchitectureLanguage.structure)/3324083196209785474");
    b.version(2);
    b.property("Type", 0x2e2e087c4bdeb172L).type(MetaIdFactory.dataTypeId(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb141L)).origin("3327606504615227762").done();
    b.aggregate("ContainterList", 0x2e2e087c4bdf0804L).target(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb0d7L).optional(true).ordered(true).multiple(true).origin("3327606504615249924").done();
    b.alias("VM");
    return b.create();
  }
}
