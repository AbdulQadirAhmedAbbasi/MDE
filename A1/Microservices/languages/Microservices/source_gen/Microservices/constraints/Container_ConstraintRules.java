package Microservices.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Container_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb0d7L, "Microservices.structure.Container");

  public static final Rule<ContainmentContext> check_id4635545526457716238 = new Rule_RestrictedPortNumber ();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id4635545526457716238));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_RestrictedPortNumber  extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:468ba8cf-600f-433a-bdb1-b531836f79ca(Microservices.constraints)/4635545526457716238");
    public static final RuleId ID_RestrictedPortNumber  = new RuleId(4635545526457716238L, SOURCE_NODE_REF);

    public Rule_RestrictedPortNumber () {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_RestrictedPortNumber , SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return SPropertyOperations.getInteger(context.getChildNode(), PROPS.Port$OgSA) > 1024;
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
  }

  /*package*/ Container_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class PROPS {
    /*package*/ static final SProperty Port$OgSA = MetaAdapterFactory.getProperty(0x3d827bac02154a87L, 0x8b1c1ab047e79a3bL, 0x2e2e087c4bdeb0d7L, 0x2e2e087c4bdeb16cL, "Port");
  }
}
