/*
 * generated by Xtext 2.25.0
 */
package org.xtext.microservices.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.microservices.mydsl.myDsl.Container;
import org.xtext.microservices.mydsl.myDsl.Environment;
import org.xtext.microservices.mydsl.myDsl.EnvironmentModel;
import org.xtext.microservices.mydsl.myDsl.Microservice;
import org.xtext.microservices.mydsl.myDsl.MyDslPackage;
import org.xtext.microservices.mydsl.myDsl.ServerNode;
import org.xtext.microservices.mydsl.myDsl.VirtualMachine;
import org.xtext.microservices.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case MyDslPackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case MyDslPackage.ENVIRONMENT_MODEL:
				sequence_EnvironmentModel(context, (EnvironmentModel) semanticObject); 
				return; 
			case MyDslPackage.MICROSERVICE:
				sequence_Microservice(context, (Microservice) semanticObject); 
				return; 
			case MyDslPackage.SERVER_NODE:
				sequence_ServerNode(context, (ServerNode) semanticObject); 
				return; 
			case MyDslPackage.VIRTUAL_MACHINE:
				sequence_VirtualMachine(context, (VirtualMachine) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         id=STRING? 
	 *         name=STRING? 
	 *         name=STRING? 
	 *         Port=INT? 
	 *         Microservice=Microservice?
	 *     )
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvironmentModel returns EnvironmentModel
	 *
	 * Constraint:
	 *     environment=Environment
	 */
	protected void sequence_EnvironmentModel(ISerializationContext context, EnvironmentModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ENVIRONMENT_MODEL__ENVIRONMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ENVIRONMENT_MODEL__ENVIRONMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentModelAccess().getEnvironmentEnvironmentParserRuleCall_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         id=STRING? 
	 *         name=STRING? 
	 *         Type=EnvironmentType? 
	 *         name=STRING? 
	 *         (nodes+=ServerNode nodes+=ServerNode*)?
	 *     )
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Microservice returns Microservice
	 *
	 * Constraint:
	 *     (name=ID id=STRING? name=STRING? Type=MicroserviceType?)
	 */
	protected void sequence_Microservice(ISerializationContext context, Microservice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServerNode returns ServerNode
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         id=STRING? 
	 *         name=STRING? 
	 *         name=STRING? 
	 *         name=STRING? 
	 *         name=STRING? 
	 *         (vms+=VirtualMachine vms+=VirtualMachine*)?
	 *     )
	 */
	protected void sequence_ServerNode(ISerializationContext context, ServerNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VirtualMachine returns VirtualMachine
	 *
	 * Constraint:
	 *     (name=ID id=STRING? name=STRING? Type=VMType? (dockers+=Container dockers+=Container*)?)
	 */
	protected void sequence_VirtualMachine(ISerializationContext context, VirtualMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
